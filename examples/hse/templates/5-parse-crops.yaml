# Micro parse the crops entries to split into sets of crops with qualifiers
# This is HSE-specific and would need code development but lark makes it easy boiler plate.
# Turn the parsed subfields into cropSituation entries using embedded resource definitions

globals:
  $datasetID: hse

imports:
  - registrations.yaml
  - crop-parser.py

one_offs:
  - name: HSE
    properties:
      "@type" : <org:Organization>
      "<skos:prefLabel>" : "Health and Safety Executive@en"
      "<rdfs:comment>"  : "The Health and Safety Executive (HSE) is Britainâ€™s national regulator for workplace health and safety.@en"

resources:
  - name: AgriProduct
    comment: "A agri-tech product. This class should be made reusable."
    properties:
      "@id" : "<hash('Product Name:','MAPP (Reg.) Number:')>"
      "<rdfs:label>": "{Product Name:}"
      "productName" : "{Product Name:}"
      "formulation" : "{Formulation Type: | autoCV}"
      "marketer"    : "{Marketing Company:}"
      "usableBy"    : "{Amateur / Professional: | autoCV}"
      "activeIngredient"  : "{Active Substance(s):}"

  - name: HSERegistration
    subclassOf: "<agvoc:Registration>"
    properties:
      "@id"                    : "<hash(MAPP (Reg.) Number:,Extent of Authorisation:)>"
      "<rdfs:label>"           : "Registration { MAPP (Reg.) Number:} for {Product Name:}"
      ":registrationNo"        : "{ MAPP (Reg.) Number:}"
      ":authorisationDate"     : "{First Authorisation Date:}"
      ":expiryDate"            : "{Product Expiry Date (notes):}"
      ":scope"                 : "{Extent of Authorisation: | autoCV}"
      ":registrationAuthority" : "<::HSE>"
      "product"                : "<::AgriProduct>"
      "^:registration"         : "<::AgriProduct>"
      "aquaticUse"             : "{Aquatic Use: | asBoolean}"
      "aerialUse"              : "{Aerial Use: | asBoolean}"
      "lowRiskProduct"         : "{Low Risk Product: | asBoolean}"
      "holder"                 : "{Authorisation Holder:}"
      "authorisationLevel"     : "{Authorisation Level: | autoCV}"
      "use"                    : "{Field of Use: | autoCV}"
      "crop-situation"         : "{Crops: | crop_parse | map_to('CropSituation')}"

      "LERAP Category:": ""

embedded:
  - name: CropSituation
    properties:
      "@id"       : "<parent>"
      "crop"      : "{crop}"
      "qualifier" : "{qualifiers}"
